"""
Django settings for EcoFactProject project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Importamos os para manejar rutas de archivos en el sistema operativo

# Construye rutas dentro del proyecto, BASE_DIR apunta a la carpeta raíz del proyecto
BASE_DIR = Path(__file__).resolve().parent.parent


# Configuraciones básicas de seguridad y despliegue

SECRET_KEY = 'django-insecure-b%oh&@$)n5f89ef_#8%l96#tu+0)ujp%@l_wow)8ulgf2etj7+'
# Clave secreta para criptografía, debe mantenerse privada en producción

DEBUG = True
# Modo debug activado para desarrollo, desactivar en producción

ALLOWED_HOSTS = []
# Lista de hosts permitidos para servir la app, vacía permite localhost


# Aplicaciones instaladas en el proyecto
INSTALLED_APPS = [
    'django.contrib.admin',          # Admin de Django
    'django.contrib.auth',           # Sistema de autenticación
    'django.contrib.contenttypes',   # Soporte para tipos de contenido
    'django.contrib.sessions',       # Manejo de sesiones
    'django.contrib.messages',       # Mensajes flash
    'django.contrib.staticfiles',    # Archivos estáticos (CSS, JS)
    'core',                         # Tu app principal donde están los modelos y lógica
]

# Middleware: capas que procesan las peticiones y respuestas
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # Protección CSRF
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Autenticación
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'EcoFactProject.urls'
# Archivo principal de rutas URL

# Configuración de plantillas HTML
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Motor de plantillas Django
        'DIRS': [],  # Directorios adicionales para buscar plantillas
        'APP_DIRS': True,  # Buscar plantillas dentro de las apps instaladas
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',  # Añade objeto request al contexto
                'django.contrib.auth.context_processors.auth',  # Añade info de usuario autenticado
                'django.contrib.messages.context_processors.messages',  # Añade mensajes flash
            ],
        },
    },
]

WSGI_APPLICATION = 'EcoFactProject.wsgi.application'
# Punto de entrada WSGI para servidores de producción


# Configuración de base de datos PostgreSQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Motor PostgreSQL
        'NAME': 'ecofact',                          # Nombre de la base de datos
        'USER': 'postgres',                         # Usuario de la base
        'PASSWORD': '123',                          # Contraseña
        'HOST': 'localhost',                        # Host de la base de datos
        'PORT': '5432',                             # Puerto de conexión
    }
}


# Validadores de contraseña para mejorar seguridad
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Configuración internacional
LANGUAGE_CODE = 'en-us'  # Idioma por defecto

TIME_ZONE = 'UTC'        # Zona horaria

USE_I18N = True          # Soporte para internacionalización

USE_TZ = True            # Uso de zonas horarias


# Archivos estáticos (CSS, JS, imágenes estáticas)
STATIC_URL = 'static/'


# Configuración para archivos multimedia (imágenes subidas por usuarios)
MEDIA_URL = '/media/'  # URL base para acceder a archivos media
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Carpeta donde se almacenan los archivos media

# Tipo de campo por defecto para claves primarias
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ---------------------------------------------------
# Cambios específicos para tu proyecto:

# 1. AUTH_USER_MODEL:
#    Le indicamos a Django que use el modelo de usuario personalizado 'Usuario' que definiste en la app 'core'.
#    Esto es fundamental para que el sistema de autenticación funcione con tu modelo y no con el User por defecto.
AUTH_USER_MODEL = 'core.Usuario'

# 2. MEDIA_URL y MEDIA_ROOT:
#    Configuramos la ruta y URL para manejar archivos multimedia (imágenes) que se usan en los campos ImageField de tus modelos.
#    MEDIA_URL es la URL pública para acceder a estos archivos.
#    MEDIA_ROOT es la ruta absoluta en el sistema donde se guardan los archivos subidos.
#    Recuerda que en desarrollo debes configurar urls.py para servir estos archivos.
    